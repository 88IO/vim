[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'mattn/sonictemplate-vim'
hook_add = '''
    let g:sonictemplate_vim_template_dir = "$HOME/.vim/template"
'''

[[plugins]]
repo = 'terryma/vim-multiple-cursors'

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['unite.vim']
hook_add = '''
    set modifiable
    set write
    let g:unite_split_rule = 'botright'
    nnoremap <silent> <Leader>o :<C-u>Unite -vertical -no-quit -winwidth=25 outline<CR>
'''

[[plugins]]
repo = 'Shougo/vimproc'
build = 'make'

[[plugins]]
repo = 'tpope/vim-fugitive'

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'vim-scripts/Align'

[[plugins]]
repo = 'cohama/lexima.vim'
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {
        \ '_': {
            \ 'runner': 'vimproc',
            \ 'runner/vimproc/updatetime': 60,
            \ 'hook/time/enable': 1,
            \ 'outputter/buffer/split': 'botright 8',
            \ 'outputter/buffer/close_on_empty': 1,
            \ 'outputter/error/success': 'buffer',
            \ 'outputter/errori/error': 'quickfix'
        \ },
        \ 'cpp': {
            \ 'command': 'clang++',
        \ },
    \ }
    nnoremap <expr><silent> <C-c> quickrun#is_running()?quickrun#sweep_sessions():"\<C-c>"
    nnoremap <silent> <F5> :QuickRun<CR>
'''

[[plugins]]
repo = 'ervandew/supertab'
hook_add = '''
    let g:SuperTabContextDefaultCompletionType = "context"
    let g:SuperTabDefaultCompletionType = "<c-n>"
'''

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    let g:indentLine_enabled = 1
    let g:indentLine_faster = 0
    let g:indentLine_color_term = 111
'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
    let g:ale_linters = {
        \ 'python': ['pyls'],
        \ 'rust': ['rls'],
        \}
    let g:ale_echo_msg_error_str = 'E'
    let g:ale_echo_msg_warning_str = 'W'
    let g:ale_echo_msg_format = '[%linter%] %code: %%s [%severity%]'
    let g:ale_open_list = 0
    let g:ale_lint_on_save = 0
    let g:ale_lint_on_text_changed = 1

    let g:ale_rust_cargo_use_clippy = 1
'''

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    set noshowmode
    set laststatus=2
    let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [
        \     ['mode', 'paste'],
        \     ['gitbranch', 'readonly', 'filename', 'modified'],
        \     ['ale'],
        \   ]
        \ },
        \ 'component_function': {
        \   'gitbranch': 'fugitive#head',
        \   'ale': 'ALEStatus',
        \ },
        \ 'separator': { 'left': "\u2b80", 'right': "\u2b82" },
        \ 'subseparator': { 'left': "\u2b81", 'right': "\u2b83" },
        \}
    function! ALEStatus()
        let l:count = ale#statusline#Count(bufnr(''))
        let l:errors = l:count.error + l:count.style_error
        let l:warnings = l:count.warning + l:count.style_warning
        return l:count.total == 0 ? 'ALE: OK' : 'ALE: ⨉' . l:errors . ' ' . '⚠ ' . l:warnings
    endfunction
'''
